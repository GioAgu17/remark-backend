# NOTE: update this with your service name
service: chat

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
custom: ${file(../../serverless.common.yml):custom}
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  logs:
    websocket: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtConversationChatTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableArnIndex'
  environment:
    connectionIdIndex: ${env:CONNECTION_ID_INDEX}
    connectionChatTableName: !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableName'
    conversationChatTableName: !ImportValue '${self:custom.sstApp}-ExtConversationChatTableName'
  websocketApiName: websocket-chat-${self:custom.stage}
  websocketApiRouteSelectionExpression: $request.body.action

functions:
  connectionManager:
    handler: connect.main
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
  defaultMessages:
    handler: connect.defaultMessage
    events:
      - websocket:
          route: $default
  sendMessage:
    handler: sendMessage.main
    events:
      - websocket:
          route: sendMessage
  sendUserInfo:
    handler: sendUserInfo.main
    events:
      - websocket:
          route: sendUserInfo
  getAllMessages:
    handler: getAllMessages.main
    events:
      - websocket:
          route: getAllMessages
