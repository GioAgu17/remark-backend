service: users

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  apiGateway:
    shouldStartNameWithService: true
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    userTableName: !ImportValue '${self:custom.sstApp}-ExtUserTableName'
    uploadsBucketName: !ImportValue '${self:custom.sstApp}-ExtAttachmentsBucketName'
    usersFileName: "users.txt"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - s3:ListBucket
        - s3:PutObject
        - s3:GetObject
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtUserTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtAttachmentsBucketArn'

functions:
  create:
    handler: create.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: users/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: users/{id}
          method: delete
          cors: true
          authorizer: aws_iam
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
