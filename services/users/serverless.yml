service: users

# Create an optimized package for our functions
package:
  individually: true
useDotenv : true
plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables\
  - serverless-plugin-warmup

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-3
  apiGateway:
    shouldStartNameWithService: true
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  environment:
    userTableName: !ImportValue '${self:custom.sstApp}-ExtUserTableName'
    collaborationsTableName: !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableName'
    bucketName: !ImportValue '${self:custom.sstApp}-ExtAttachmentsBucketName'
    collabBusinessIndex: ${env:COLLAB_BUSINESS_INDEX}
    userTypeIndex: ${env:USER_TYPE_INDEX}
    collabCountIndex: ${env:COLLAB_COUNT_INDEX}
    firstRange: ${env:FIRST_RNG_INFL_PRC}
    secondRange: ${env:SECOND_RNG_INFL_PRC}
    thirdRange: ${env:THIRD_RNG_INFL_PRC}
    fourthRange: ${env:FOURTH_RNG_INFL_PRC}
    fifthRange: ${env:FIFTH_RNG_INFL_PRC}
    sixthRange: ${env:SIXTH_RNG_INFL_PRC}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - s3:*
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtUserTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtUserTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtAttachmentsBucketArn'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"
functions:
  create:
    handler: create.main
    events:
      - http:
          path: users
          method: post
          cors: true
          authorizer: aws_iam
  get:
    warmup:
      testWarmer:
        enabled:
          - dev
          - prod
    handler: get.main
    events:
      - http:
          path: users
          method: get
          cors: true
          authorizer: aws_iam
  getById:
    handler: getById.main
    events:
      - http:
          path: users/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: users
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: users
          method: delete
          cors: true
          authorizer: aws_iam
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
