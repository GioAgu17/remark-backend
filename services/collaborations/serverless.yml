service: collaborations

# Create an optimized package for our functions
package:
  individually: true
useDotenv: true
plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-plugin-warmup

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  apiGateway:
    shouldStartNameWithService: true

  environment:
    collaborationTableName: !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableName'
    bucketName: !ImportValue '${self:custom.sstApp}-ExtAttachmentsBucketName'
    offersTableName: !ImportValue '${self:custom.sstApp}-ExtNewOffersTableName'
    collaborationTableIndex: ${env:COLLAB_TABLE_INDEX}
    exploreIndex: ${env:EXPLORE_INDEX}
    partitionKeyOffer: ${env:PARTITION_KEY_OFFER}
    websocketApiId: ${env:WEBSOCKET_APP_ID}
    connectionChatTableName: !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableName'
    conversationChatTableName: !ImportValue '${self:custom.sstApp}-ExtConversationChatTableName'
    userTableName: !ImportValue '${self:custom.sstApp}-ExtUserTableName'
    stage: ${env:STAGE_ENV}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:BatchGetItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtConversationChatTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtUserTableArn'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"
functions:
  create:
    handler: create.main
    events:
      - http:
          path: collaborations
          method: post
          cors: true
          authorizer: aws_iam
  relaunchOffer:
    handler: relaunch.main
    events:
      - http:
          path: relaunchOffer
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: getCollaboration
          method: post
          cors: true
          authorizer: aws_iam
  listForBusiness:
    warmup:
      testWarmer:
        enabled:
          - dev
          - prod
    handler: listForBusiness.main
    events:
      - http:
          path: listForBusiness/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listForInfluencer:
    warmup:
      testWarmer:
        enabled:
          - dev
          - prod
    handler: listForInfluencer.main
    events:
      - http:
          path: listForInfluencer
          method: post
          cors: true
          authorizer: aws_iam
  explore:
    warmup:
      testWarmer:
        enabled:
          - dev
          - prod
    handler: explore.main
    events:
      - http:
          path: explore
          method: get
          cors: true
          authorizer: aws_iam
  confirmRemarker:
    handler: confirmRemarker.main
    events:
      - http:
          path: confirmRemarker
          method: post
          cors: true
          authorizer: aws_iam
  createCollabTest:
    handler: createCollabTest.main
    events:
      - http:
          path: createCollabTest
          method: post
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: delete
          method: post
          cors: true
          authorizer: aws_iam
  close:
    handler: close.main
    events:
      - http:
          path: close
          method: post
          cors: true
          authorizer: aws_iam
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
