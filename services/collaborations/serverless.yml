service: collaborations

# Create an optimized package for our functions
package:
  individually: true
useDotenv: true
plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  apiGateway:
    shouldStartNameWithService: true

  environment:
    collaborationsTableName: !ImportValue '${self:custom.sstApp}-ExtCollaborationsTableName'
    offersTableName: !ImportValue '${self:custom.sstApp}-ExtNewOffersTableName'
    collaborationsTableIndex: ${env:COLLAB_TABLE_INDEX}
    exploreIndex: ${env:EXPLORE_INDEX}
    partitionKeyOffer: ${env:PARTITION_KEY_OFFER}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtCollaborationsTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtCollaborationsTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArnIndex'
functions:
  create:
    handler: create.main
    events:
      - http:
          path: collaborations
          method: post
          cors: true
          authorizer: aws_iam
  relaunchOffer:
    handler: relaunch.main
    events:
      - http:
          path: relaunchOffer
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: getCollaboration
          method: post
          cors: true
          authorizer: aws_iam
  listForBusiness:
    handler: listForBusiness.main
    events:
      - http:
          path: listForBusiness/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listForInfluencer:
    handler: listForInfluencer.main
    events:
      - http:
          path: listForInfluencer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  explore:
    handler: explore.main
    events:
      - http:
          path: explore
          method: get
          cors: true
          authorizer: aws_iam
  confirmRemarker:
    handler: confirmRemarker.main
    events:
      - http:
          path: confirmRemarker
          method: post
          cors: true
          authorizer: aws_iam
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
