# NOTE: update this with your service name
service: offers
useDotenv: true
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables
  - serverless-plugin-warmup

custom: ${file(../../serverless.common.yml):custom}
  
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-3
  apiGateway:
    shouldStartNameWithService: true
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

  environment:
    offersTableName: !ImportValue '${self:custom.sstApp}-ExtNewOffersTableName'
    collaborationTableName: !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableName'
    offerTableIndex: ${env:OFFER_TABLE_INDEX}
    userTableName: !ImportValue '${self:custom.sstApp}-ExtUserTableName'
    hashKeyLength: ${env:HASHKEY_LENGTH}
    expiredOffersTable: !ImportValue '${self:custom.sstApp}-ExtExpiredOffersTableName'
    partitionKeyOffer: ${env:PARTITION_KEY_OFFER}
    categoryWeight: ${env:CATEGORY_WEIGHT}
    followersWeight: ${env:FOLLOWERS_WEIGHT}
    ageWeight: ${env:AGE_WEIGHT}
    ageVariance: ${env:AGE_VARIANCE}
    websocketApiId: ${env:WEBSOCKET_APP_ID}
    connectionChatTableName: !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableName'
    conversationChatTableName: !ImportValue '${self:custom.sstApp}-ExtConversationChatTableName'
    stage: ${env:STAGE_ENV}
    allowMacroInfluencersThreshold: ${env:ALLOW_MACRO_INFLU}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:BatchGetItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtUserTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtExpiredOffersTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewCollaborationTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtConnectionChatTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtConversationChatTableArn'
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"
functions:
  create:
    handler: create.main
    events:
      - http:
          path: offers
          method: post
          cors: true
          authorizer: aws_iam
  listOffersForInflu:
    warmup:
      testWarmer:
        enabled:
          - dev
          - prod
    handler: listOffersForInflu.main
    events:
      - http:
          path: offers/listOffersForInflu
          method: post
          cors: true
          authorizer: aws_iam
  listOffersForInfluId:
    handler: listOffersForInfluId.main
    events:
      - http:
          path: offers/listOffersForInflu/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listOffersForBusiness:
    warmup:
      testWarmer:
        enabled:
          - dev
          - prod
    handler: listOffersForBusiness.main
    events:
      - http:
          path: offers/listOffersForBusiness
          method: get
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: offers/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: offers/update
          method: post
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: offers/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getUserExpiredOffers:
    handler: getUserExpiredOffers.main
    events:
      - http:
          path: getUserExpiredOffers
          method: post
          cors: true
          authorizer: aws_iam
  autoFillOffer:
    handler: autoFillOffer.main
    events:
      - http:
          path: autoFillOffer
          method: post
          cors: true
          authorizer: aws_iam
  markOffer:
    handler: markOffer.main
    events:
      - http:
          path: markOffer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  unmarkOffer:
    handler: unmarkOffer.main
    events:
      - http:
          path: unmarkOffer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  saveOffer:
    handler: saveOffer.main
    events:
      - http:
          path: saveOffer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  unsaveOffer:
    handler: unsaveOffer.main
    events:
      - http:
          path: unsaveOffer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getSavedOffers:
    handler: getSavedOffers.main
    events:
      - http:
          path: getSavedOffers
          method: get
          cors: true
          authorizer: aws_iam
  expiredOffers:
    handler: expiredOffers.main
    events:
      - http:
          path: expiredOffers
          method: get
          cors: true
          authorizer: aws_iam
  selectRemarker:
    handler: selectRemarker.main
    events:
      - http:
          path: selectRemarker
          method: post
          cors: true
          authorizer: aws_iam
  unselectRemarker:
    handler: unselectRemarker.main
    events:
      - http:
          path: unselectRemarker
          method: post
          cors: true
          authorizer: aws_iam
  offerWithRange:
    handler: offerWithRange.main
    events:
      - http:
          path: offerWithRange/{id}
          method: get
          cors: true
          authorizer: aws_iam
  relaunch:
    handler: relaunch.main
    events:
      - http:
          path: relaunch
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
