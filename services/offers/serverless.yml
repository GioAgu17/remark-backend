# NOTE: update this with your service name
service: offers
useDotenv: true
# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

custom: ${file(../../serverless.common.yml):custom}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-2
  apiGateway:
    shouldStartNameWithService: true
  # To load environment variables externally
  # rename env.example to .env and uncomment
  # the following line. Also, make sure to not
  # commit your .env.
  #
  #environment:
  #  SAMPLE_ENV_VAR: ${env:SAMPLE_ENV_VAR}

  environment:
    offersTableName: !ImportValue '${self:custom.sstApp}-ExtNewOffersTableName'
    offerTableIndex: ${env:OFFER_TABLE_INDEX}
    userTableName: !ImportValue '${self:custom.sstApp}-ExtUserTableName'
    collaborationsTableName: !ImportValue '${self:custom.sstApp}-ExtCollaborationsTableName'
    hashKeyLength: ${env:HASHKEY_LENGTH}
    expiredOffersTable: !ImportValue '${self:custom.sstApp}-ExtExpiredOffersTableName'
    partitionKeyOffer: ${env:PARTITION_KEY_OFFER}
    categoryWeight: ${env:CATEGORY_WEIGHT}
    followersWeight: ${env:FOLLOWERS_WEIGHT}
    ageWeight: ${env:AGE_WEIGHT}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:DescribeTable
        - dynamodb:BatchGetItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - !ImportValue '${self:custom.sstApp}-ExtOfferTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtUserTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtCollaborationsTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtOfferTableArnIndex'
        - !ImportValue '${self:custom.sstApp}-ExtExpiredOffersTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArn'
        - !ImportValue '${self:custom.sstApp}-ExtNewOffersTableArnIndex'


functions:
  create:
    handler: create.main
    events:
      - http:
          path: offers
          method: post
          cors: true
          authorizer: aws_iam
  listOffersForInflu:
    handler: listOffersForInflu.main
    events:
      - http:
          path: offers/listOffersForInflu
          method: post
          cors: true
          authorizer: aws_iam
  listOffersForInfluId:
    handler: listOffersForInfluId.main
    events:
      - http:
          path: offers/listOffersForInflu/{id}
          method: get
          cors: true
          authorizer: aws_iam
  listOffersForBusiness:
    handler: listOffersForBusiness.main
    events:
      - http:
          path: offers/listOffersForBusiness
          method: get
          cors: true
          authorizer: aws_iam
  get:
    handler: get.main
    events:
      - http:
          path: offers/{id}
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: offers/update
          method: post
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: offers/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  getUserExpiredOffers:
    handler: getUserExpiredOffers.main
    events:
      - http:
          path: getUserExpiredOffers
          method: post
          cors: true
          authorizer: aws_iam
  autoFillOffer:
    handler: autoFillOffer.main
    events:
      - http:
          path: autoFillOffer
          method: post
          cors: true
          authorizer: aws_iam
  markOffer:
    handler: markOffer.main
    events:
      - http:
          path: markOffer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  saveOffer:
    handler: saveOffer.main
    events:
      - http:
          path: saveOffer/{id}
          method: get
          cors: true
          authorizer: aws_iam
  getSavedOffers:
    handler: getSavedOffers.main
    events:
      - http:
          path: getSavedOffers
          method: get
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # Cognito Identity Pool Policy
  - ${file(resources/cognito-policy.yml)}
